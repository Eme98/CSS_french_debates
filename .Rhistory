table(df$party)
View(xml_raw)
list_mp <- read.csv("~/LMU/CSS/Projet/tout_assemblee/xml/Try/liste_id_parlementaires.txt", sep=";")
colnames(list_mp)
list_mp <- select(list_mp,
identifiant, Prenom, Nom, Groupe.politique..abrege.
)
list_mp <- list_mp %>%
rename(orateurs_id = identifiant,
prenom = Prenom,
nom = Nom,
party = Groupe.politique..abrege.)
colnames(list_mp)
str(list_mp)
list_mp$orateurs_id <- as.character(list_mp$orateurs_id)
df <- left_join(df, list_mp, by = "orateurs_id")
df <- subset(df, select = -c(prenom, nom))
rm(list_mp)
table(df$party)
df$party <- ifelse(str_extract(df$orateurs_nom, "groupe LR") == "groupe LR",
"LR", df$party)
table(df$party)
gsub("groupe LR", "LR", df$orateurs_nom[1:20])
yo <- gsub("groupe LR", "LR", df$orateurs_nom[1:20])
yo
View(df)
table(date_seance)
table(df$date_seance)
df_view <- df %>% filter(table(df$date_seance) > 20)
df_view <- df %>% group_by(date_seance) %>% filter(n() >= 20)
df <- df %>% group_by(date_seance) %>% filter(n() >= 20)
str_match(df$orateurs_nom, "\\s*([^du groupe]*),\\s*([A-Z]+)\\s*")
str_match(df$orateurs_nom, "(?<=du groupe)")
str_match(df$orateurs_nom, "(?<=du groupe).*") %>% head()
str_match(df$orateurs_nom, "(?<=du groupe ).*") %>% head()
str_match(df$orateurs_nom[40:60], "(?<=du groupe ).*")
library(dplyr)
list_mp <- read.csv("~/LMU/CSS/Projet/tout_assemblee/xml/Try/liste_id_parlementaires.txt", sep=";")
colnames(list_mp)
list_mp <- select(list_mp,
identifiant, Prenom, Nom, Groupe.politique..abrege.
)
list_mp <- list_mp %>%
rename(orateurs_id = identifiant,
prenom = Prenom,
nom = Nom,
party = Groupe.politique..abrege.)
colnames(list_mp)
str(list_mp)
list_mp$orateurs_id <- as.character(list_mp$orateurs_id)
df <- left_join(df, list_mp, by = "orateurs_id")
df <- subset(df, select = -c(prenom, nom))
rm(list_mp)
df$gender <- ifelse(str_extract(df$orateurs_nom, "M. |Un ") == "M. " |
str_extract(df$orateurs_nom, "M. |Un ") == "Un ",
"M", 0)
df$gender <- ifelse(is.na(df$gender) == FALSE, df$gender,
ifelse(str_extract(df$orateurs_nom, "Mme |Une ") == "Mme " |
str_extract(df$orateurs_nom, "Mme |Une ") == "Une ",
"F", NA))
df$gender %>% head()
df <- df[-c(24:28),]
df <- df[,-c(24:28)]
list_mp <- read.csv("~/LMU/CSS/Projet/tout_assemblee/xml/Try/liste_id_parlementaires.txt", sep=";")
colnames(list_mp)
list_mp <- select(list_mp,
identifiant, Prenom, Nom, Groupe.politique..abrege.
)
list_mp <- list_mp %>%
rename(orateurs_id = identifiant,
prenom = Prenom,
nom = Nom,
party = Groupe.politique..abrege.)
colnames(list_mp)
str(list_mp)
list_mp$orateurs_id <- as.character(list_mp$orateurs_id)
df <- left_join(df, list_mp, by = "orateurs_id")
df <- subset(df, select = -c(prenom, nom))
rm(list_mp)
df$gender <- ifelse(str_extract(df$orateurs_nom, "M. |Un ") == "M. " |
str_extract(df$orateurs_nom, "M. |Un ") == "Un ",
"M", 0)
df$gender <- ifelse(is.na(df$gender) == FALSE, df$gender,
ifelse(str_extract(df$orateurs_nom, "Mme |Une ") == "Mme " |
str_extract(df$orateurs_nom, "Mme |Une ") == "Une ",
"F", NA))
df$gender %>% head()
ifelse(is.na(df$party) == T, str_match(df$orateurs_nom[40:60], "(?<=du groupe ).*"),
df$party) %>% head()
ifelse(is.na(df$party) == T, str_match(df$orateurs_nom, "(?<=du groupe ).*"),
df$party) %>% head()
df$party <- ifelse(is.na(df$party) == T, str_match(df$orateurs_nom, "(?<=du groupe ).*"),
df$party)
rm(list=setdiff(ls(), "df"))
library(xml2)
library(tidyverse)
getwd()
setwd("C:/Users/emeli/Documents/LMU/CSS/Projet/tout_assemblee/xml/Try")
### Check all files in file
list.files(pattern=".xml$") #
# create a list from these files
list.filenames<-list.files(pattern=".xml$")
#####
df_list <- lapply(list.filenames, function(f){
xml_raw <- read_xml(f)
# Find the xml namespace prefix
xml_ns(xml_raw)
# Strip the namespace to work with the file
xml_ns_strip(xml_raw)
remove_me <- xml_find_all(xml_raw, "//uid")
xml_remove(remove_me)
remove_me <- xml_find_all(xml_raw, "//seanceRef")
xml_remove(remove_me)
remove_me <- xml_find_all(xml_raw, "//sessionRef")
xml_remove(remove_me)
date_seance <- xml_find_first(xml_raw, "//metadonnees//dateSeanceJour") %>% xml_text()
date_seance
num_seance <- xml_find_first(xml_raw, "//metadonnees//numSeanceJour") %>% xml_text()
num_seance
theme <- xml_find_first(xml_raw, ".//intitule") %>% xml_text()
remove_me = xml_find_all(xml_raw, "metadonnees")
xml_remove(remove_me)
### We extract nodes which refer to the person talking or to an interruption
#find all str nodes
nodes<-xml_find_all(xml_raw, ".//paragraphe")
## We retrieve only sentences an orator speaks or is interrupted
## We leave out every generic sentences such as "The assembly opens"
nodes<-nodes[xml_attr(nodes, "code_grammaire")=="PAROLE_GENERIQUE" |
xml_attr(nodes, "code_grammaire")=="INTERRUPTION_1_10"]
orateurs_nom <- xml_text( xml_find_all( nodes, ".//nom" ) )
orateurs_id <- xml_text( xml_find_all( nodes, ".//id" ) )
orateurs_qualite <- xml_text( xml_find_all( nodes, ".//qualite" ) )
orateurs_texte <- xml_text( xml_find_all( nodes, ".//texte" ) )
orateurs_italic <- nodes %>% xml_find_first( ".//italique") %>% xml_text()
orateurs_interruption = xml_attr(nodes, "code_grammaire")
orateurs_time <- xml_find_all(nodes, ".//texte") %>% xml_attr("stime")
out <- data.frame( date_seance, num_seance, theme,
orateurs_nom, orateurs_id, orateurs_qualite, orateurs_texte,
orateurs_italic, orateurs_interruption,
orateurs_time)
})
df <- do.call(rbind, df_list)
##
table(df$date_seance)
# The meetings of 28.06.2022 and 29.06.2022 have only 10 lines -> they are unrepresentative
# We remove them of the dataframe
df <- df %>% group_by(date_seance) %>% filter(n() >= 20)
### We want to extract the reactions inside the text. They provide information on which
# party reacts and how (exclamations or approbations).
library(stringr)
# Get the parenthesis and what is inside
df$exclamations <- str_extract_all(df$orateurs_texte, "\\([^()]+\\)")
df$exclamations <- str_to_lower(df$exclamations)
df$applaud <- str_extract_all(df$exclamations, "applaudissements")
df$applaud <- lengths(df$applaud)
df$protest <- str_extract_all(df$exclamations, "protestations |exclamations")
df$protest <- lengths(df$protest)
df$orateurs_texte_without <- str_replace(df$orateurs_texte, " \\s*\\([^\\)]+\\)", "")
df$orateurs_texte_without <- str_replace(df$orateurs_texte_without, " \\s*\\([^\\)]+\\)", "")
df$orateurs_texte_without <- str_replace(df$orateurs_texte_without, " \\s*\\([^\\)]+\\)", "")
df$orateurs_texte_without <- str_replace(df$orateurs_texte_without, " \\s*\\([^\\)]+\\)", "")
df$orateurs_texte_without <- str_replace(df$orateurs_texte_without, " \\s*\\([^\\)]+\\)", "")
df$orateurs_texte_without <- str_replace(df$orateurs_texte_without, " \\s*\\([^\\)]+\\)", "")
df$orateurs_texte_without <- str_replace(df$orateurs_texte_without, " \\s*\\([^\\)]+\\)", "")
df$orateurs_texte_without <- str_replace(df$orateurs_texte_without, " \\s*\\([^\\)]+\\)", "")
df$orateurs_texte_without <- str_replace(df$orateurs_texte_without, " \\s*\\([^\\)]+\\)", "")
df$LFI <- str_extract_all(df$exclamations, "lfi")
df$LFI <- lengths(df$LFI)
df$NUPES <- str_extract_all(df$exclamations, "nupes")
df$NUPES <- lengths(df$NUPES)
df$ECOLO <- str_extract_all(df$exclamations, "écolo")
df$ECOLO <- lengths(df$ECOLO)
df$SOC <- str_extract_all(df$exclamations, "soc")
df$SOC <- lengths(df$SOC)
df$RE <- str_extract_all(df$exclamations, "re")
df$RE <- lengths(df$RE)
df$Dem <- str_extract_all(df$exclamations, "dem")
df$Dem <- lengths(df$Dem)
df$HOR <- str_extract_all(df$exclamations, "hor")
df$HOR <- lengths(df$HOR)
df$LR <- str_extract_all(df$exclamations, "lr")
df$LR <- lengths(df$LR)
df$RN <- str_extract_all(df$exclamations, "rn")
df$RN <- lengths(df$RN)
getwd()
## We need the party of each of the MPs
## We have access to the list of every MPs, their id and their party
library(dplyr)
list_mp <- read.csv("~/LMU/CSS/Projet/tout_assemblee/xml/Try/liste_id_parlementaires.txt", sep=";")
colnames(list_mp)
list_mp <- select(list_mp,
identifiant, Prenom, Nom, Groupe.politique..abrege.
)
list_mp <- list_mp %>%
rename(orateurs_id = identifiant,
prenom = Prenom,
nom = Nom,
party = Groupe.politique..abrege.)
colnames(list_mp)
str(list_mp)
list_mp$orateurs_id <- as.character(list_mp$orateurs_id)
df <- left_join(df, list_mp, by = "orateurs_id")
df <- subset(df, select = -c(prenom, nom))
rm(list_mp)
#### GENDER
### We extract the gender of each MP
### The name provides information :
## it can either be : "M. Surname Name" or "Un député" for a male MP
## it can be : "Mme Surname Name" or "Une députée" for a female MP
## sometimes a group of MPs speak -> genderless, NA
df$gender <- ifelse(str_extract(df$orateurs_nom, "M. |Un ") == "M. " |
str_extract(df$orateurs_nom, "M. |Un ") == "Un ",
"M", 0)
df$gender <- ifelse(is.na(df$gender) == FALSE, df$gender,
ifelse(str_extract(df$orateurs_nom, "Mme |Une ") == "Mme " |
str_extract(df$orateurs_nom, "Mme |Une ") == "Une ",
"F", NA))
df$gender %>% head()
### Party group
# Sometimes a MP speak, but we do not know who she/he is, but we can know her/his party
# We retrieve information after "du groupe"
df$party <- ifelse(is.na(df$party) == T, str_match(df$orateurs_nom, "(?<=du groupe ).*"),
df$party)
df$party %>% head()
#### Remove all objects except df
rm(list=setdiff(ls(), "df"))
table(df$date_seance)
colnames(df)
library(quanteda)
my_corpus <- corpus(df$orateurs_texte_without)
summary(my_corpus)
docvars(my_corpus, "ID") <- df$orateurs_id
docvars(my_corpus, "date") <- as.Date("2022-11-06")
texts(my_corpus)[2]
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
my_stopwords = c(stopwords("fr"), "d'un", "L'" , "a",
"re", "hor", "c'est",
"ça", "m", "dit", "veux", "bien", "quand", "ni","dont", "d'une", "or")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
my_stopwords = c(stopwords("fr"), "d'un", "L'" , "a",
"re", "hor", "c'est",
"ça", "m", "dit", "veux", "bien", "quand", "ni","dont", "d'une", "or",
"qu'il")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
my_stopwords = c(stopwords("fr"), "d'un", "L'" , "a",
"re", "hor", "c'est",
"ça", "m", "dit", "veux", "bien", "quand", "ni","dont", "d'une", "or",
"qu'il", "n'est")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
set.seed(101)
library(wordcloud)
library(quanteda.textplots)
textplot_wordcloud(myStemMat,
min_count = 10,
random_order = FALSE,
rotation = .25,
color = RColorBrewer::brewer.pal(8,"Dark2"))
my_corpus <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE",])
my_corpus <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE"])
summary(my_corpus)
docvars(my_corpus, "ID") <- df$orateurs_id
docvars(my_corpus, "date") <- as.Date("2022-11-06")
texts(my_corpus)[2]
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
my_stopwords = c(stopwords("fr"), "d'un", "L'" , "a",
"re", "hor", "c'est",
"ça", "m", "dit", "veux", "bien", "quand", "ni","dont", "d'une", "or",
"qu'il", "n'est")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
my_corpus <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "INTERRUPTION_1_10"])
summary(my_corpus)
docvars(my_corpus, "ID") <- df$orateurs_id
docvars(my_corpus, "date") <- as.Date("2022-11-06")
texts(my_corpus)[2]
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
my_stopwords = c(stopwords("fr"), "d'un", "L'" , "a",
"re", "hor", "c'est",
"ça", "m", "dit", "veux", "bien", "quand", "ni","dont", "d'une", "or",
"qu'il", "n'est")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
set.seed(101)
library(wordcloud)
library(quanteda.textplots)
textplot_wordcloud(myStemMat,
min_count = 10,
random_order = FALSE,
rotation = .25,
color = RColorBrewer::brewer.pal(8,"Dark2"))
my_corpus <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "INTERRUPTION_1_10" & df$gender == "M"])
summary(my_corpus)
docvars(my_corpus, "ID") <- df$orateurs_id
docvars(my_corpus, "date") <- as.Date("2022-11-06")
texts(my_corpus)[2]
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
my_stopwords = c(stopwords("fr"), "d'un", "L'" , "a",
"re", "hor", "c'est",
"ça", "m", "dit", "veux", "bien", "quand", "ni","dont", "d'une", "or",
"qu'il", "n'est")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
set.seed(101)
library(wordcloud)
library(quanteda.textplots)
textplot_wordcloud(myStemMat,
min_count = 10,
random_order = FALSE,
rotation = .25,
color = RColorBrewer::brewer.pal(8,"Dark2"))
#####
my_corpus <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "INTERRUPTION_1_10" & df$gender == "F"])
summary(my_corpus)
docvars(my_corpus, "ID") <- df$orateurs_id
docvars(my_corpus, "date") <- as.Date("2022-11-06")
texts(my_corpus)[2]
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
my_stopwords = c(stopwords("fr"), "d'un", "L'" , "a",
"re", "hor", "c'est",
"ça", "m", "dit", "veux", "bien", "quand", "ni","dont", "d'une", "or",
"qu'il", "n'est")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
set.seed(101)
library(wordcloud)
library(quanteda.textplots)
textplot_wordcloud(myStemMat,
min_count = 10,
random_order = FALSE,
rotation = .25,
color = RColorBrewer::brewer.pal(8,"Dark2"))
summary(my_corpus)
texts(my_corpus)[2]
create_wordcloud <- function(my_corpus){
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
}
sapply(my_corpus, create_wordcloud)
youps <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "INTERRUPTION_1_10"])
create_wordcloud <- function(my_corpus){
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
}
sapply(youps, create_wordcloud)
create_wordcloud(youps)
create_wordcloud <- function(my_corpus){
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
my_stopwords = c(stopwords("fr"))
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
set.seed(101)
textplot_wordcloud(myStemMat,
min_count = 10,
random_order = FALSE,
rotation = .25,
color = RColorBrewer::brewer.pal(8,"Dark2"))
}
create_wordcloud(youps)
create_wordcloud <- function(my_corpus){
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
my_stopwords = c(stopwords("fr"), "c'est", "ça", "a", "n'est")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
set.seed(101)
textplot_wordcloud(myStemMat,
min_count = 10,
random_order = FALSE,
rotation = .25,
color = RColorBrewer::brewer.pal(8,"Dark2"))
}
create_wordcloud(youps)
my_stopwords = c(stopwords("fr"), "c'est", "ça", "a", "n'est",
"où", "quoi")
create_wordcloud <- function(my_corpus){
tokens = tokens(my_corpus, remove_numbers = TRUE,
remove_punct = TRUE,
remove_separators = TRUE)
my_dfm = dfm(tokens)
my_dfm[, 1:5]
my_stopwords = c(stopwords("fr"), "c'est", "ça", "a", "n'est",
"où", "quoi")
myStemMat = dfm(my_dfm,
remove = my_stopwords)
topfeatures(myStemMat, 20)
set.seed(101)
textplot_wordcloud(myStemMat,
min_count = 10,
random_order = FALSE,
rotation = .25,
color = RColorBrewer::brewer.pal(8,"Dark2"))
}
create_wordcloud(youps)
interruption_men <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "INTERRUPTION_1_10"
& df$gender == "M"])
create_wordcloud(interruption_men)
interruption_women <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "INTERRUPTION_1_10"
& df$gender == "F"])
create_wordcloud(interruption_women)
create_wordcloud(interruption_men)
create_wordcloud(interruption)
interruption <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "INTERRUPTION_1_10"])
create_wordcloud(interruption)
parole <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE"])
parole_men <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE"
& df$gender == "M"])
parole_women <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE"
& df$gender == "F"])
create_wordcloud(parole)
create_wordcloud(parole_men)
create_wordcloud(parole_women)
parole_women <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE"
& df$gender == "F" &
df$orateurs_id != "721908"])
create_wordcloud(parole_women)
#### PAROLE GENERIQUE
str(df$orateurs_id)
parole <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE" &
df$orateurs_id != "721908"])
parole_men <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE"
& df$gender == "M" &
df$orateurs_id != "721908"])
parole_women <- corpus(df$orateurs_texte_without[df$orateurs_interruption == "PAROLE_GENERIQUE"
& df$gender == "F" &
df$orateurs_id != "721908"])
create_wordcloud(parole)
create_wordcloud(parole_men)
create_wordcloud(parole_women)
rm(list=setdiff(ls(), "df"))
View(tokens_env)
View(df)
table(df$date_seance)
table(df$date_seance, df$num_seance)
unique(df$date_seance)
unique(df$date_seance, df$num_seance)
table(df$date_seance, df$theme)
table(df$theme)
unique(df$date_seance, df$theme)
theme_date = unique.data.frame(df$date_seance, df$theme)
unique.data.frame(df$date_seance, df$theme)
unique.array(df$date_seance, df$theme)
df %>% select(date_seance, theme) %>%
group_by(df$theme)
df %>% select(date_seance, theme) %>%
group_by(theme)
df %>% select(date_seance, theme) %>%
group_by(theme) %>% unique()
df %>% select(date_seance, theme, num_seance) %>%
group_by(theme) %>% unique()
#### MEN / WOMEN
colnames(df)
table(df$orateurs_interruption, df$gender)
#### MEN / WOMEN
df %>% group_by(orateurs_id) %>% table(orateurs_interruption, gender)
#### MEN / WOMEN
df %>% group_by(orateurs_id) %>% table(gender)
#### MEN / WOMEN
df %>% group_by(orateurs_id) %>% summary(gender)
df %>% summary()
df %>% group_by(orateurs_interruption) %>%summary()
summary
library(purrr)
df %>%                               # Summary by group using purrr
split(.$orateurs_interruption) %>%
map(summary)
table(df$orateurs_interruption, df$gender) %>% prop.table()
table(df$orateurs_interruption, df$party) %>% prop.table()
table(df$orateurs_interruption, df$party) %>% prop.table()*100
